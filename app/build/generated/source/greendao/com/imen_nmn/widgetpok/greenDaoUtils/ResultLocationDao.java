package com.imen_nmn.widgetpok.greenDaoUtils;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT_LOCATION".
*/
public class ResultLocationDao extends AbstractDao<ResultLocation, Long> {

    public static final String TABLENAME = "RESULT_LOCATION";

    /**
     * Properties of entity ResultLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AreaName = new Property(1, String.class, "areaName", false, "AREA_NAME");
        public final static Property Country = new Property(2, String.class, "country", false, "COUNTRY");
        public final static Property Region = new Property(3, String.class, "region", false, "REGION");
        public final static Property Latitude = new Property(4, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(5, String.class, "longitude", false, "LONGITUDE");
        public final static Property Population = new Property(6, String.class, "population", false, "POPULATION");
        public final static Property WeatherUrl = new Property(7, String.class, "weatherUrl", false, "WEATHER_URL");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property ResultConditionId = new Property(9, long.class, "resultConditionId", false, "RESULT_CONDITION_ID");
    }

    private DaoSession daoSession;

    private final WeatherTypeConverter typeConverter = new WeatherTypeConverter();

    public ResultLocationDao(DaoConfig config) {
        super(config);
    }
    
    public ResultLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT_LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AREA_NAME\" TEXT," + // 1: areaName
                "\"COUNTRY\" TEXT," + // 2: country
                "\"REGION\" TEXT," + // 3: region
                "\"LATITUDE\" TEXT," + // 4: latitude
                "\"LONGITUDE\" TEXT," + // 5: longitude
                "\"POPULATION\" TEXT," + // 6: population
                "\"WEATHER_URL\" TEXT," + // 7: weatherUrl
                "\"TYPE\" TEXT," + // 8: type
                "\"RESULT_CONDITION_ID\" INTEGER NOT NULL );"); // 9: resultConditionId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_RESULT_LOCATION__id_DESC ON RESULT_LOCATION" +
                " (\"_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT_LOCATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResultLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(2, areaName);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(4, region);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(6, longitude);
        }
 
        String population = entity.getPopulation();
        if (population != null) {
            stmt.bindString(7, population);
        }
 
        String weatherUrl = entity.getWeatherUrl();
        if (weatherUrl != null) {
            stmt.bindString(8, weatherUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindLong(10, entity.getResultConditionId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResultLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(2, areaName);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(4, region);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(6, longitude);
        }
 
        String population = entity.getPopulation();
        if (population != null) {
            stmt.bindString(7, population);
        }
 
        String weatherUrl = entity.getWeatherUrl();
        if (weatherUrl != null) {
            stmt.bindString(8, weatherUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindLong(10, entity.getResultConditionId());
    }

    @Override
    protected final void attachEntity(ResultLocation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ResultLocation readEntity(Cursor cursor, int offset) {
        ResultLocation entity = new ResultLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // country
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // region
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // population
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weatherUrl
            cursor.isNull(offset + 8) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 8)), // type
            cursor.getLong(offset + 9) // resultConditionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResultLocation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAreaName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountry(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRegion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLongitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPopulation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeatherUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setResultConditionId(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResultLocation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResultLocation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResultLocation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getResultConditionDao().getAllColumns());
            builder.append(" FROM RESULT_LOCATION T");
            builder.append(" LEFT JOIN RESULT_CONDITION T0 ON T.\"RESULT_CONDITION_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ResultLocation loadCurrentDeep(Cursor cursor, boolean lock) {
        ResultLocation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ResultCondition resultCondition = loadCurrentOther(daoSession.getResultConditionDao(), cursor, offset);
         if(resultCondition != null) {
            entity.setResultCondition(resultCondition);
        }

        return entity;    
    }

    public ResultLocation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ResultLocation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ResultLocation> list = new ArrayList<ResultLocation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ResultLocation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ResultLocation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
